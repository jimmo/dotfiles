[
	// Delete whole word.
	{ "keys": ["ctrl+w"], "command": "run_macro_file", "args": {"file": "res://Packages/User/Delete whole word.sublime-macro"} },
	// Delete rest of line.
	{ "keys": ["ctrl+k", "k"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete to Hard EOL.sublime-macro"} },
	// Delete whole line.
	{ "keys": ["ctrl+k", "ctrl+k"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Line.sublime-macro"} },
	// Duplicate line.
	{ "keys": ["ctrl+k", "d"], "command": "duplicate_line" },
	// Replace close-tab shortcut now used by delete-whole-word.
	{ "keys": ["ctrl+k", "w"], "command": "close" },
	// Simpler "yank".
	{ "keys": ["ctrl+k", "y"], "command": "yank" },

	// Always use incremental find.
	{ "keys": ["ctrl+f"], "command": "show_panel", "args": {"panel": "incremental_find", "reverse": false } },
	// Make ctrl+g / ctrl+shift+g also incremental find next/prev. (To match e.g. Chrome)
	{ "keys": ["ctrl+g"], "command": "find_next", "context": [
		{ "key": "panel", "operand": "incremental_find"},
		{ "key": "panel_visible" }
	] },
	{ "keys": ["ctrl+shift+g"], "command": "find_prev", "context": [
		{ "key": "panel", "operand": "incremental_find"},
		{ "key": "panel_visible" }
	] },
	// Also add ctrl+r for find_prev (easier to type).
	{ "keys": ["ctrl+r"], "command": "find_prev", "context": [
		{ "key": "panel", "operand": "incremental_find"},
		{ "key": "panel_visible"}
	] },
	// Shortcut for regular find (just in case... I don't really understand why regular find exists?).
	{ "keys": ["ctrl+k", "f"], "command": "show_panel", "args": {"panel": "find", "reverse": false} },

	// Easier shortcut for find_under (like '*' in Vim).
	{ "keys": ["ctrl+i"], "command": "find_under" },             // Was ctrl+f3
	{ "keys": ["ctrl+shift+i"], "command": "find_under_prev" },  // Was ctrl+shift+f3
	{ "keys": ["ctrl+k", "i"], "command": "find_all_under" },    // Was alt+f3

	// Emacs must-haves.
	{ "keys": ["ctrl+d"], "command": "right_delete" },
	{ "keys": ["ctrl+a"], "command": "move_to", "args": {"to": "bol", "extend": false} },
	{ "keys": ["ctrl+e"], "command": "move_to", "args": {"to": "eol", "extend": false} },
	// Make tab re-indent line when the cursor isn't at the start of the line.
	{ "keys": ["tab"], "command": "reindent", "context":
		[
			{ "key": "auto_complete_visible", "operand": false },
			{ "key": "popup_visible", "operand": false },
			{ "key": "panel_visible", "operand": false },
			{ "key": "setting.auto_indent", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_match", "operand": "^[\\s]*$", "match_all": true },
		]
	},

	// Replacements for commands used by above.
	{ "keys": ["ctrl+k", "a"], "command": "select_all" },        // Was ctrl+a
	{ "keys": ["ctrl+k", "e"], "command": "slurp_find_string" }, // Was ctrl+e

	// Simpler goto chords. (Only enabled when panel (e.g. find) isn't visible, otherwise find_next will wait for the second part of the chord to not match)
	// Goto line. (Which is what ctrl+g on its own is by default)
	{ "keys": ["ctrl+g", "g"], "command": "show_overlay", "args": {"overlay": "goto", "text": ":"}, "context": [
		{ "key": "panel_visible", "operand": false }
	] },
	{ "keys": ["ctrl+g", "l"], "command": "show_overlay", "args": {"overlay": "goto", "text": ":"}, "context": [
		{ "key": "panel_visible", "operand": false }
	] },
	// Show current file in sidebar.
	{ "keys": ["ctrl+g", "s"], "command": "reveal_in_side_bar", "context": [
		{ "key": "panel_visible", "operand": false }
	] },
	// Goto definition.
	{ "keys": ["ctrl+g", "d"], "command": "goto_definition", "context": [
		{ "key": "panel_visible", "operand": false }
	] },
	// Goto reference(s).
	{ "keys": ["ctrl+g", "r"], "command": "goto_reference", "context": [
		{ "key": "panel_visible", "operand": false }
	] },
	// Jump back.
	{ "keys": ["ctrl+g", "b"], "command": "jump_back", "context": [
		{ "key": "panel_visible", "operand": false }
	] },
	// Git next/prev modification.
	{ "keys": ["ctrl+g", "n"], "command": "next_modification", "context": [
		{ "key": "panel_visible", "operand": false }
	] },
	{ "keys": ["ctrl+g", "p"], "command": "prev_modification", "context": [
		{ "key": "panel_visible", "operand": false }
	] },

	// Vim must-haves. (Dot mode)
	{ "keys": ["ctrl+."], "command": "repeat_since_movement" },

	// Broken key combos.
	{ "keys": ["ctrl+alt+up"], "command": "swap_line_up" },
	{ "keys": ["ctrl+alt+down"], "command": "swap_line_down" },

	// Esc to clear selection.
	{ "keys": ["escape"], "command": "single_selection", "context":
		[
			{ "key": "num_selections", "operator": "not_equal", "operand": 1 }
		]
	},

	// Select text between brackets (using BracketHighlighter plugin).
    {
        "no_outside_adj": null,
        "keys": ["ctrl+'"],
        "command": "bh_key",
        "args":
        {
            "lines" : true,
            "plugin":
            {
                "type": ["__all__"],
                "command": "bh_modules.bracketselect"
            }
        }
    }
]
